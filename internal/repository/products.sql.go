// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: products_get.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const sqlcGetProducts = `-- name: SqlcGetProducts :many

SELECT id, created_at, updated_at, deleted_at, name
FROM products_get
LIMIT $1
OFFSET $2
`

type SqlcGetProductsParams struct {
	Limit  int32
	Offset int32
}

type SqlcGetProductsRow struct {
	ID        int64
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	DeletedAt pgtype.Timestamp
	Name      string
}

// PRODUCTS
func (q *Queries) SqlcGetProducts(ctx context.Context, arg SqlcGetProductsParams) ([]SqlcGetProductsRow, error) {
	rows, err := q.db.Query(ctx, sqlcGetProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SqlcGetProductsRow
	for rows.Next() {
		var i SqlcGetProductsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
